
# Publish acceptance test coverage into coveralls when either running tests for a
# mender PR (MENDER_REV ~= /pull/XXX/head/) or new merge into mender/master that requires
# Docker images publishing (PUBLISH_DOCKER_CLIENT_IMAGES == "true")
.template_publish_acceptance_coverage:
  only:
    variables:
      - $PUBLISH_DOCKER_CLIENT_IMAGES == "true"
      - $MENDER_REV =~ /pull\/.*\/head/
  stage: publish
  needs:
    - init_workspace
  image: golang:1.15-alpine3.12
  before_script:
    - apk --update add git
    # Run go get out of the repo to not modify go.mod
    - cd / && go get github.com/mattn/goveralls && cd -
    # Coveralls env variables:
    #  According to https://docs.coveralls.io/supported-ci-services
    #  we should set CI_NAME, CI_BUILD_NUMBER, etc. But according
    #  to goveralls source code (https://github.com/mattn/goveralls)
    #  many of these are not supported. Set CI_BRANCH, CI_PR_NUMBER,
    #  and pass few others as command line arguments.
    #  See also https://docs.coveralls.io/api-reference
    - export CI_BRANCH=${CI_COMMIT_BRANCH}
    - export CI_PR_NUMBER=${CI_COMMIT_BRANCH#pr_}
    # Get mender source
    - tar xf ${CI_PROJECT_DIR}/workspace.tar.gz ./go/src/github.com/mendersoftware/mender
    - mv go/src/github.com/mendersoftware/mender ${CI_PROJECT_DIR}/mender
    - cd ${CI_PROJECT_DIR}/mender
  script:
    - goveralls
      -debug
      -repotoken ${MENDER_COVERALLS_TOKEN}
      -service gitlab-ci
      -jobid $(git rev-parse HEAD)
      -covermode set
      -flagname acceptance-${JOB_BASE_NAME}
      -parallel
      -coverprofile $(find ${CI_PROJECT_DIR}/acceptance-tests-coverage -name 'coverage*.out' | tr '\n' ',' | sed 's/,$//')

publish_accep_qemux86_64_uefi_grub:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_QEMUX86_64_UEFI_GRUB != "true"
  needs:
    - init_workspace
    - test_accep_qemux86_64_uefi_grub
  variables:
    JOB_BASE_NAME: qemux86_64_uefi_grub

publish_accep_vexpress_qemu:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_VEXPRESS_QEMU != "true"
  needs:
    - init_workspace
    - test_accep_vexpress_qemu
  variables:
    JOB_BASE_NAME: vexpress_qemu

publish_accep_qemux86_64_bios_grub:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_QEMUX86_64_BIOS_GRUB != "true"
  needs:
    - init_workspace
    - test_accep_qemux86_64_bios_grub
  variables:
    JOB_BASE_NAME: qemux86_64_bios_grub

publish_accep_qemux86_64_bios_grub_gpt:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_QEMUX86_64_BIOS_GRUB_GPT != "true"
  needs:
    - init_workspace
    - test_accep_qemux86_64_bios_grub_gpt
  variables:
    JOB_BASE_NAME: qemux86_64_bios_grub_gpt

publish_accep_vexpress_qemu_uboot_uefi_grub:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_VEXPRESS_QEMU_UBOOT_UEFI_GRUB != "true"
  needs:
    - init_workspace
    - test_accep_vexpress_qemu_uboot_uefi_grub
  variables:
    JOB_BASE_NAME: vexpress_qemu_uboot_uefi_grub

publish_accep_vexpress_qemu_flash:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_VEXPRESS_QEMU_FLASH != "true"
  needs:
    - init_workspace
    - test_accep_vexpress_qemu_flash
  variables:
    JOB_BASE_NAME: vexpress_qemu_flash

publish_accep_beagleboneblack:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_BEAGLEBONEBLACK != "true"
  needs:
    - init_workspace
    - test_accep_beagleboneblack
  variables:
    JOB_BASE_NAME: beagleboneblack

publish_accep_raspberrypi3:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_RASPBERRYPI3 != "true"
  needs:
    - init_workspace
    - test_accep_raspberrypi3
  variables:
    JOB_BASE_NAME: raspberrypi3

publish_accep_raspberrypi4:
  extends: .template_publish_acceptance_coverage
  except:
    variables:
      - $TEST_RASPBERRYPI4 != "true"
  needs:
    - init_workspace
    - test_accep_raspberrypi4
  variables:
    JOB_BASE_NAME: raspberrypi4

# This job allows mender repo to publish the related Docker client images on
# merges to master or release branches.
# Do not confuse with release_docker_images which publishes all images
# (including client ones) used during releases.
publish_docker_client_images:
  only:
    variables:
      - $PUBLISH_DOCKER_CLIENT_IMAGES == "true"
  stage: release
  image: docker
  services:
    - docker:19.03-dind
  needs:
    - init_workspace
    - build_servers
    - build_client
  before_script:
    # Check correct dind setup
    - docker version
    # Install dependencies
    - apk --update add git python3 py3-pip
    - pip3 install --upgrade pyyaml
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz build_revisions.env stage-artifacts /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
    - mv /tmp/build_revisions.env /tmp/stage-artifacts .
    # Login for private repos
    - docker login -u menderbuildsystem -p ${DOCKER_HUB_PASSWORD}
  script:
    # for pre 2.4.x releases, omit --version-type
    - if $WORKSPACE/integration/extra/release_tool.py --help | grep -e --version-type; then
    -   VERSION_TYPE_PARAMS="--version-type docker"
    - fi
    # Load, tag and push mender-client-docker, mender-client-qemu, mender-client-qemu-rofs
    - for image in $($WORKSPACE/integration/extra/release_tool.py --list docker | grep mender-client); do
        version=$($WORKSPACE/integration/extra/release_tool.py --version-of $image $VERSION_TYPE_PARAMS --in-integration-version HEAD);
        docker_url=$($WORKSPACE/integration/extra/release_tool.py --map-name docker $image docker_url);
        docker load -i stage-artifacts/${image}.tar;
        docker tag $docker_url:pr $docker_url:${version};
        docker push $docker_url:${version};
      done
