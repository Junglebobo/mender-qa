
variables:
  MANTRA_ID_accep_qemux86_64_uefi_grub: "1"
  MANTRA_ID_accep_vexpress_qemu: "2"
  MANTRA_ID_accep_qemux86_64_bios_grub: "3"
  MANTRA_ID_accep_qemux86_64_bios_grub_gpt: "4"
  MANTRA_ID_accep_vexpress_qemu_uboot_uefi_grub: "5"
  MANTRA_ID_accep_vexpress_qemu_flash: "6"
  MANTRA_ID_backend_integration_open_source: "7"
  MANTRA_ID_backend_integration_enterprise: "8"
  MANTRA_ID_full_integration_open_source: "9"
  MANTRA_ID_full_integration_enterprise: "10"

test:acceptance:qemux86_64:uefi_grub:
  only:
    # Even though the build for this configuration is done unconditionally in build:client job,
    # we will still trigger this one for BUILD_QEMUX86_64_UEFI_GRUB to be able to collect artifacts
    variables:
      - $BUILD_QEMUX86_64_UEFI_GRUB == "true"
      - $TEST_QEMUX86_64_UEFI_GRUB == "true"
  stage: test
  extends: .template_build_test_acc
  variables:
    JOB_BASE_NAME: mender_qemux86_64_uefi_grub
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_QEMUX86_64_UEFI_GRUB" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_qemux86_64_uefi_grub.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_qemux86_64_uefi_grub.html;
      fi

    - if [ "$NIGHTLY_BUILD" = "true" ]; then
    -   build_name=nightly-$(date +%Y-%m-%d)
    - else
    -   build_name=pullreq-$(date +%Y-%m-%d)-${CI_PIPELINE_ID}
    - fi
    - ${CI_PROJECT_DIR}/scripts/mantra_post_test_results
        $MANTRA_ID_accep_qemux86_64_uefi_grub
        $build_name
        results_accep_qemux86_64_uefi_grub.xml || true

    - mkdir -p stage-artifacts
    - cp $WORKSPACE/qemux86-64-uefi-grub/qemux86-64-uefi-grub_release_1_*.mender stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_qemux86_64_uefi_grub.xml
      - report_accep_qemux86_64_uefi_grub.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_qemux86_64_uefi_grub.xml

test:acceptance:vexpress_qemu:
  only:
    variables:
      - $BUILD_VEXPRESS_QEMU == "true"
      - $TEST_VEXPRESS_QEMU == "true"
  stage: test
  extends: .template_build_test_acc
  variables:
    JOB_BASE_NAME: mender_vexpress_qemu
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_VEXPRESS_QEMU" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_vexpress_qemu.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_vexpress_qemu.html;
      fi

    - if [ "$NIGHTLY_BUILD" = "true" ]; then
    -   build_name=nightly-$(date +%Y-%m-%d)
    - else
    -   build_name=pullreq-$(date +%Y-%m-%d)-${CI_PIPELINE_ID}
    - fi
    - ${CI_PROJECT_DIR}/scripts/mantra_post_test_results
        $MANTRA_ID_accep_vexpress_qemu
        $build_name
        results_accep_vexpress_qemu.xml || true

    - mkdir -p stage-artifacts
    - cp $WORKSPACE/vexpress-qemu/vexpress-qemu_release_1_*.mender stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_vexpress_qemu.xml
      - report_accep_vexpress_qemu.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_vexpress_qemu.xml

test:acceptance:qemux86_64:bios_grub:
  only:
    variables:
      - $BUILD_QEMUX86_64_BIOS_GRUB == "true"
      - $TEST_QEMUX86_64_BIOS_GRUB == "true"
  stage: test
  extends: .template_build_test_acc
  variables:
    JOB_BASE_NAME: mender_qemux86_64_bios_grub
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_QEMUX86_64_BIOS_GRUB" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_qemux86_64_bios_grub.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_qemux86_64_bios_grub.html;
      fi

    - if [ "$NIGHTLY_BUILD" = "true" ]; then
    -   build_name=nightly-$(date +%Y-%m-%d)
    - else
    -   build_name=pullreq-$(date +%Y-%m-%d)-${CI_PIPELINE_ID}
    - fi
    - ${CI_PROJECT_DIR}/scripts/mantra_post_test_results
        $MANTRA_ID_accep_qemux86_64_bios_grub
        $build_name
        results_accep_qemux86_64_bios_grub.xml || true

    - mkdir -p stage-artifacts
    - cp $WORKSPACE/qemux86-64-bios-grub/qemux86-64-bios-grub_release_1_*.mender stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_qemux86_64_bios_grub.xml
      - report_accep_qemux86_64_bios_grub.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_qemux86_64_bios_grub.xml

test:acceptance:qemux86_64:bios_grub_gpt:
  only:
    variables:
      - $BUILD_QEMUX86_64_BIOS_GRUB_GPT == "true"
      - $TEST_QEMUX86_64_BIOS_GRUB_GPT == "true"
  stage: test
  extends: .template_build_test_acc
  variables:
    JOB_BASE_NAME: mender_qemux86_64_bios_grub_gpt
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_QEMUX86_64_BIOS_GRUB_GPT" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_qemux86_64_bios_grub_gpt.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_qemux86_64_bios_grub_gpt.html;
      fi

    - if [ "$NIGHTLY_BUILD" = "true" ]; then
    -   build_name=nightly-$(date +%Y-%m-%d)
    - else
    -   build_name=pullreq-$(date +%Y-%m-%d)-${CI_PIPELINE_ID}
    - fi
    - ${CI_PROJECT_DIR}/scripts/mantra_post_test_results
        $MANTRA_ID_accep_qemux86_64_bios_grub_gpt
        $build_name
        results_accep_qemux86_64_bios_grub_gpt.xml || true

    - mkdir -p stage-artifacts
    - cp $WORKSPACE/qemux86-64-bios-grub-gpt/qemux86-64-bios-grub-gpt_release_1_*.mender stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_qemux86_64_bios_grub_gpt.xml
      - report_accep_qemux86_64_bios_grub_gpt.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_qemux86_64_bios_grub_gpt.xml

test:acceptance:vexpress_qemu:uboot_uefi_grub:
  only:
    variables:
      - $BUILD_VEXPRESS_QEMU_UBOOT_UEFI_GRUB == "true"
      - $TEST_VEXPRESS_QEMU_UBOOT_UEFI_GRUB == "true"
  stage: test
  extends: .template_build_test_acc
  variables:
    JOB_BASE_NAME: mender_vexpress_qemu_uboot_uefi_grub
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_VEXPRESS_QEMU_UBOOT_UEFI_GRUB" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_vexpress_qemu_uboot_uefi_grub.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_vexpress_qemu_uboot_uefi_grub.html;
      fi

    - if [ "$NIGHTLY_BUILD" = "true" ]; then
    -   build_name=nightly-$(date +%Y-%m-%d)
    - else
    -   build_name=pullreq-$(date +%Y-%m-%d)-${CI_PIPELINE_ID}
    - fi
    - ${CI_PROJECT_DIR}/scripts/mantra_post_test_results
        $MANTRA_ID_accep_vexpress_qemu_uboot_uefi_grub
        $build_name
        results_accep_vexpress_qemu_uboot_uefi_grub.xml || true

    - mkdir -p stage-artifacts
    - cp $WORKSPACE/vexpress-qemu-uboot-uefi-grub/vexpress-qemu-uboot-uefi-grub_release_1_*.mender stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_vexpress_qemu_uboot_uefi_grub.xml
      - report_accep_vexpress_qemu_uboot_uefi_grub.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_vexpress_qemu_uboot_uefi_grub.xml

# Note that vexpress-qemu-flash configuration does not generate an ext4 image so
# the build script does not generate the Mender Artifact neither. This job
# collects the .ubifs for debugging but not for release publishing
test:acceptance:vexpress_qemu_flash:
  only:
    variables:
      - $BUILD_VEXPRESS_QEMU_FLASH == "true"
      - $TEST_VEXPRESS_QEMU_FLASH == "true"
  stage: test
  extends: .template_build_test_acc
  variables:
    JOB_BASE_NAME: mender_vexpress_qemu_flash
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_VEXPRESS_QEMU_FLASH" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_vexpress_qemu_flash.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_vexpress_qemu_flash.html;
      fi

    - if [ "$NIGHTLY_BUILD" = "true" ]; then
    -   build_name=nightly-$(date +%Y-%m-%d)
    - else
    -   build_name=pullreq-$(date +%Y-%m-%d)-${CI_PIPELINE_ID}
    - fi
    - ${CI_PROJECT_DIR}/scripts/mantra_post_test_results
        $MANTRA_ID_accep_vexpress_qemu_flash
        $build_name
        results_accep_vexpress_qemu_flash.xml || true

    - mkdir -p stage-artifacts
    - cp $WORKSPACE/vexpress-qemu-flash/core-image-minimal-vexpress-qemu-flash.ubifs stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_vexpress_qemu_flash.xml
      - report_accep_vexpress_qemu_flash.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_vexpress_qemu_flash.xml

test:acceptance:beagleboneblack:
  only:
    variables:
      - $BUILD_BEAGLEBONEBLACK == "true"
      - $TEST_BEAGLEBONEBLACK == "true"
  stage: test
  extends: .template_build_test_acc
  variables:
    JOB_BASE_NAME: mender_beagleboneblack
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_BEAGLEBONEBLACK" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_beagleboneblack.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_beagleboneblack.html;
      fi
    - mkdir -p stage-artifacts
    - cp $WORKSPACE/beagleboneblack/beagleboneblack_release_1_*.mender stage-artifacts/
    - cp $WORKSPACE/beagleboneblack/mender-beagleboneblack_*.sdimg.gz stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_beagleboneblack.xml
      - report_accep_beagleboneblack.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_beagleboneblack.xml

test:acceptance:raspberrypi3:
  only:
    variables:
      - $BUILD_RASPBERRYPI3 == "true"
      - $TEST_RASPBERRYPI3 == "true"
  stage: test
  extends: .template_build_test_acc
  variables:
    JOB_BASE_NAME: mender_raspberrypi3
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_RASPBERRYPI3" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_raspberrypi3.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_raspberrypi3.html;
      fi
    - mkdir -p stage-artifacts
    - cp $WORKSPACE/raspberrypi3/raspberrypi3_release_1_*.mender stage-artifacts/
    - cp $WORKSPACE/raspberrypi3/mender-raspberrypi3_*.sdimg.gz stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_raspberrypi3.xml
      - report_accep_raspberrypi3.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_raspberrypi3.xml

test:acceptance:raspberrypi4:
  only:
    variables:
      - $BUILD_RASPBERRYPI4 == "true"
      - $TEST_RASPBERRYPI4 == "true"
  stage: test
  extends: .template_build_test_acc
  variables:
    JOB_BASE_NAME: mender_raspberrypi4
  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    - if [ "$TEST_RASPBERRYPI4" = "true" ]; then
        cp $WORKSPACE/meta-mender/tests/acceptance/results.xml results_accep_raspberrypi4.xml;
        cp $WORKSPACE/meta-mender/tests/acceptance/report.html report_accep_raspberrypi4.html;
      fi
    - mkdir -p stage-artifacts
    - cp $WORKSPACE/raspberrypi4/raspberrypi4_release_1_*.mender stage-artifacts/
    - cp $WORKSPACE/raspberrypi4/mender-raspberrypi4_*.sdimg.gz stage-artifacts/
    - cp /var/log/sysstat/sysstat.log .
    - sadf sysstat.log -g -- -qurbS > sysstat.svg

    # Post job status
    - ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - stage-artifacts/
      - results_accep_raspberrypi4.xml
      - report_accep_raspberrypi4.html
      - acceptance-tests-coverage
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_accep_raspberrypi4.xml

test:backend-integration:open_source:
  only:
    variables:
      - $RUN_INTEGRATION_TESTS == "true"
  stage: test
  image: docker/compose:alpine-1.27.4
  variables:
    TEST_SUITE: "open"
  services:
    - docker:19.03-dind
  tags:
    - mender-qa-slave-highcpu
  needs:
    - init_workspace
    - build:servers
    - build:mender-artifact
  before_script:
    # Default value, will later be overwritten if successful
    - echo "failure" > /JOB_RESULT.txt

    - docker version
    - apk --update add bash git py-pip gcc make python2-dev
      libc-dev libffi-dev openssl-dev python3 curl jq sysstat
    - pip3 install pyyaml
    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz build_revisions.env stage-artifacts /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
    - mv /tmp/build_revisions.env /tmp/stage-artifacts .

    # Load all docker images except client
    - for repo in `integration/extra/release_tool.py -l docker`; do
        if ! echo $repo | grep -q mender-client; then
          docker load -i stage-artifacts/${repo}.tar;
        fi;
      done
    # Login for private repos
    - docker login -u menderbuildsystem -p ${DOCKER_HUB_PASSWORD}
    - docker login -u ntadm_menderci -p ${REGISTRY_MENDER_IO_PASSWORD} registry.mender.io
    # Set testing versions to PR
    - for repo in `integration/extra/release_tool.py -l docker`; do
        integration/extra/release_tool.py --set-version-of $repo --version pr;
      done
    # mender-artifact
    - mkdir -p integration/backend-tests/downloaded-tools
    - mv stage-artifacts/mender-artifact-linux integration/backend-tests/downloaded-tools/mender-artifact
    # copy for pre 2.4.x releases
    - cp integration/backend-tests/downloaded-tools/mender-artifact integration/backend-tests/mender-artifact
    # sysstat monitoring suite for Alpine Linux
    # collect cpu, load avg, memory and io usage every 2 secs forever
    # use 'sar' from sysstat to render the result file manually
    - ln -s /var/log/sa/ /var/log/sysstat
    - sar -P ALL 2 -o /var/log/sysstat/sysstat.log -uqrbS >/dev/null 2>&1 &
  script:
    # Traps only work if executed in a sub shell.
    - "("

    - function handle_exit() {
      ${CI_PROJECT_DIR}/scripts/maybe-wait-in-stage.sh WAIT_IN_STAGE_TEST ${CI_PROJECT_DIR}/WAIT_IN_STAGE_TEST;
      };
      trap handle_exit EXIT

    - INTEGRATION_TEST_SUITE=$(integration/extra/release_tool.py --select-test-suite || echo "all")

    - if [ "$INTEGRATION_TEST_SUITE" = "$TEST_SUITE" ] || [ "$INTEGRATION_TEST_SUITE" = "all" ]; then
        # Post job status
    -   ${CI_PROJECT_DIR}/scripts/github_pull_request_status pending "Gitlab ${CI_JOB_NAME} started" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

    -   echo Running backend-tests suite $INTEGRATION_TEST_SUITE
    -   cd integration/backend-tests/

        # From 2.4.x on, the script would download the requirements by default
    -   if ./run --help | grep -e --no-download; then
    -     RUN_ARGS="--no-download";
    -   fi

        # for pre 2.2.x releases, ignore test suite selection and just run open tests
    -   if ./run --help | grep -e --suite; then
    -     ./run --suite $TEST_SUITE $RUN_ARGS;
    -   else
    -     PYTEST_ARGS="-k 'not Multitenant'" ./run;
    -   fi

        # Always keep this at the end of the script stage
    -   echo "success" > /JOB_RESULT.txt
    - else
    -   echo "skipped" > /JOB_RESULT.txt
    - fi

    - ")"

  after_script:
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "skipped" ]; then
    -   if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    -   find ${CI_PROJECT_DIR}/../integration/backend-tests -mindepth 1 -maxdepth 1 -name 'acceptance.*' -exec cp "{}" . \;
    -   ls ${CI_PROJECT_DIR}/../integration/backend-tests/results_*xml | xargs -n 1 -i cp {} .
    -   ls ${CI_PROJECT_DIR}/../integration/backend-tests/report_*html | xargs -n 1 -i cp {} .

    -   if [ "$NIGHTLY_BUILD" = "true" ]; then
    -     build_name=nightly-$(date +%Y-%m-%d)
    -   else
    -     build_name=pullreq-$(date +%Y-%m-%d)-${CI_PIPELINE_ID}
    -   fi
    -   if [ "$TEST_SUITE" = "open" ]; then
    -     mantra_id=$MANTRA_ID_backend_integration_open_source
    -     results_file=results_backend_integration_open.xml
    -   elif [ "$TEST_SUITE" = "enterprise" ]; then
    -     mantra_id=$MANTRA_ID_backend_integration_enterprise
    -     results_file=results_backend_integration_enterprise.xml
    -   fi
    -   ${CI_PROJECT_DIR}/scripts/mantra_post_test_results
          $mantra_id
          $build_name
          $results_file || true

    -   cp /var/log/sysstat/sysstat.log .
    -   sadf sysstat.log -g -- -qurbS > sysstat.svg

        # Post job status
    -   ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"
    - fi

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - acceptance.*
      - results_backend_integration_*.xml
      - report_backend_integration_*.html
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_backend_integration_*.xml

test:backend-integration:enterprise:
  extends: test:backend-integration:open_source
  variables:
    TEST_SUITE: "enterprise"

.integration_setup_template:
  stage: test
  # Integration tests depends on running ssh to containers, we're forced to
  # run dockerd on the same host.
  image: docker:19.03-dind
  variables:
    DOCKER_CLIENT_TIMEOUT: 300
    COMPOSE_HTTP_TIMEOUT: 300
    TEST_SUITE: "open"
  tags:
    - mender-qa-slave-highmem
  before_script:
    # Default value, will later be overwritten if successful
    - echo "failure" > /JOB_RESULT.txt
    - unset DOCKER_HOST
    - unset DOCKER_TLS_VERIFY
    - unset DOCKER_CERT_PATH

    # Restore workspace from init stage
    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - mv workspace.tar.gz build_revisions.env stage-artifacts /tmp
    - rm -rf ${WORKSPACE}
    - mkdir -p ${WORKSPACE}
    - cd ${WORKSPACE}
    - tar -xf /tmp/workspace.tar.gz
    - mv /tmp/build_revisions.env /tmp/stage-artifacts .

    # Dependencies for post job status and io stats
    - apk --update add curl jq sysstat hdparm

    # Start dockerd in the background
    - /usr/local/bin/dockerd &
    # Wait for dockerd to start
    - |-
      MAX_WAIT=30
      while [ ! -e "/var/run/docker.sock" ] && [ $MAX_WAIT -gt 0 ]; do
        MAX_WAIT=$(($MAX_WAIT - 1))
        sleep 1
      done
    - docker version # Verify that the docker server is up and running

    # Output storage io stats
    - df -h . | tail -1 | awk '{system("hdparm -tT "$1);}'

    # Get and install the integration test requirements
    - apk add $(cat ${WORKSPACE}/integration/tests/requirements/apk-requirements.txt)
    - pip install -r ${WORKSPACE}/integration/tests/requirements/python-requirements.txt

    # Load all docker images, and the client images depending on $BUILD_CLIENT
    - for repo in `integration/extra/release_tool.py -l docker`; do
    -   if echo $repo | grep -q mender-client; then
    -     if [ "${BUILD_CLIENT}" = "true" ]; then
    -       docker load -i stage-artifacts/${repo}.tar;
    -     else
    -       continue
    -     fi
    -   fi
    -   docker load -i stage-artifacts/${repo}.tar;
    - done

    # Login for private repos
    - docker login -u menderbuildsystem -p ${DOCKER_HUB_PASSWORD}
    - docker login -u ntadm_menderci -p ${REGISTRY_MENDER_IO_PASSWORD} registry.mender.io
    # Set testing versions to PR
    - for repo in `integration/extra/release_tool.py -l docker`; do
    -   if echo $repo | grep -q mender-client; then
    -       if [ "${BUILD_CLIENT}" = "true" ]; then
    -         integration/extra/release_tool.py --set-version-of $repo --version pr;
    -       else
    -         continue
    -       fi
    -   fi
    -   integration/extra/release_tool.py --set-version-of $repo --version pr;
    - done
    # Other dependencies
    - install stage-artifacts/mender-artifact-linux /usr/local/bin/mender-artifact
    - install stage-artifacts/mender-cli.linux.amd64 /usr/local/bin/mender-cli
    - make -C ${WORKSPACE}/go/src/github.com/mendersoftware/mender install-modules-gen
    # sysstat monitoring suite for Alpine Linux
    # collect cpu, load avg, memory and io usage every 2 secs forever
    # use 'sar' from sysstat to render the result file manually
    - ln -s /var/log/sa/ /var/log/sysstat
    - sar -P ALL 2 -o /var/log/sysstat/sysstat.log -uqrbS >/dev/null 2>&1 &
  script:
    # Traps only work if executed in a sub shell.
    - "("

    - function handle_exit() {
      ${CI_PROJECT_DIR}/scripts/maybe-wait-in-stage.sh WAIT_IN_STAGE_TEST ${CI_PROJECT_DIR}/WAIT_IN_STAGE_TEST;
      };
      trap handle_exit EXIT

    - INTEGRATION_TEST_SUITE=$(integration/extra/release_tool.py --select-test-suite || echo "all")
    - if [ "$INTEGRATION_TEST_SUITE" = "$TEST_SUITE" ] || [ "$INTEGRATION_TEST_SUITE" = "all" ]; then
        # Post job status
    -   ${CI_PROJECT_DIR}/scripts/github_pull_request_status pending "Gitlab ${CI_JOB_NAME} started" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"

    -   echo Running integration tests suite $INTEGRATION_TEST_SUITE
        # only do automatic test suite selection if the user wasn't specific
        # run.sh will pick up the SPECIFIC_INTEGRATION_TEST var
    -   if [ -z "$SPECIFIC_INTEGRATION_TEST" ]; then
          case $TEST_SUITE in
            "enterprise")
              export SPECIFIC_INTEGRATION_TEST="Enterprise";;
            "open")
              export SPECIFIC_INTEGRATION_TEST="not Enterprise";;
          esac
        fi
    -   source ${CI_PROJECT_DIR}/build_revisions.env
    -   cd integration/tests
    -   ./run.sh --no-download --machine-name qemux86-64

        # Always keep this at the end of the script stage
    -   echo "success" > /JOB_RESULT.txt
    - else
    -   echo "skipped" > /JOB_RESULT.txt
    - fi

    - ")"

  after_script:
    - unset DOCKER_HOST
    - unset DOCKER_TLS_VERIFY
    - unset DOCKER_CERT_PATH

    - export WORKSPACE=$(realpath ${CI_PROJECT_DIR}/..)
    - if [ "$(cat /JOB_RESULT.txt)" != "skipped" ]; then
    -   if [ "$(cat /JOB_RESULT.txt)" != "success" ]; then ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"; fi

    -   cp -r ${CI_PROJECT_DIR}/../integration/tests/mender_test_logs .
    -   cp ${CI_PROJECT_DIR}/../integration/tests/results.xml results_full_integration.xml
    -   cp ${CI_PROJECT_DIR}/../integration/tests/report.html report_full_integration.html

    -   if [ "$NIGHTLY_BUILD" = "true" ]; then
    -     build_name=nightly-$(date +%Y-%m-%d)
    -   else
    -     build_name=pullreq-$(date +%Y-%m-%d)-${CI_PIPELINE_ID}
    -   fi
    -   if [ "$TEST_SUITE" = "open" ]; then
    -     mantra_id=$MANTRA_ID_full_integration_open_source
    -   elif [ "$TEST_SUITE" = "enterprise" ]; then
    -     mantra_id=$MANTRA_ID_full_integration_enterprise
    -   fi
    -   ${CI_PROJECT_DIR}/scripts/mantra_post_test_results
          $mantra_id
          $build_name
          results_full_integration.xml || true

    -   cp /var/log/sysstat/sysstat.log .
    -   sadf sysstat.log -g -- -qurbS > sysstat.svg

        # Post job status
    -   ${CI_PROJECT_DIR}/scripts/github_pull_request_status $(cat /JOB_RESULT.txt) "Gitlab ${CI_JOB_NAME} finished" "${CI_JOB_URL}" "${CI_JOB_NAME}/${INTEGRATION_REV}"
    - fi

  artifacts:
    expire_in: 2w
    when: always
    paths:
      - mender_test_logs
      - results_full_integration.xml
      - report_full_integration.html
      - sysstat.log
      - sysstat.svg
    reports:
      junit: results_full_integration.xml


test:integration:source_client:open_source:
  extends: .integration_setup_template
  only:
    variables:
      - ( $RUN_INTEGRATION_TESTS == "true" && $BUILD_CLIENT == "true" )
  needs:
    - init_workspace
    - build:servers
    - build:client:qemu
    - build:client:docker
    - build:mender-artifact
    - build:mender-cli


test:integration:source_client:enterprise:
  extends: test:integration:source_client:open_source
  variables:
    TEST_SUITE: "enterprise"


test:integration:prebuilt_client:open_source:
  extends: .integration_setup_template
  only:
    variables:
      - $RUN_INTEGRATION_TESTS == "true"
  except:
    variables:
      - $BUILD_CLIENT == "true"
  needs:
    - init_workspace
    - build:servers
    - build:mender-artifact
    - build:mender-cli


test:integration:prebuilt_client:enterprise:
  extends: test:integration:prebuilt_client:open_source
  variables:
    TEST_SUITE: "enterprise"
